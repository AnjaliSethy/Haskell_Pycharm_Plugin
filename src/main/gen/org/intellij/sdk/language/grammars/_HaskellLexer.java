// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _HaskellLexer.flex

package org.intellij.sdk.language.grammars;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.intellij.lexer.*;
import static org.intellij.sdk.language.psi.HaskellTypes.*;

public class _HaskellLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NCOMMENT = 2;
  public static final int NHADDOCK = 4;
  public static final int QQ = 6;
  public static final int OPTIONS_GHC = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\2\u0100\1\u0200\34\u0100\1\u0300\1\u0400\1\u0500\3\u0100"+
    "\1\u0600\261\u0100\10\u0700\364\u0100\1\u0800\1\u0900\u0f2a\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\5\0\1\1\3\0\1\1\1\2\2\1\1\3\22\0"+
    "\1\4\1\5\1\6\1\7\2\5\1\10\1\11\1\12"+
    "\1\13\1\5\1\14\1\15\1\16\1\17\1\5\1\20"+
    "\4\21\3\22\2\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\43\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\44\1\60\1\61\1\44\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\2\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\101\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\1\101\1\117\1\120\1\121\1\122\6\0"+
    "\1\123\32\0\1\1\13\0\1\124\10\0\1\124\u01ba\0"+
    "\41\125\31\44\7\125\31\101\66\125\50\0\2\123\106\0"+
    "\12\126\6\0\12\126\170\0\1\127\22\0\1\127\4\0"+
    "\1\127\2\0\1\127\6\0\1\127\153\0\1\130\1\125"+
    "\1\131\77\125\1\132\55\125\1\133\27\134\1\135\36\134"+
    "\1\136\216\134\1\5\71\134\5\0\1\137\372\0\u0100\123"+
    "\126\0\1\124\u0110\0\1\124\230\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2560];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\3\1\2\1\4\1\5\1\4"+
    "\1\6\1\7\1\10\1\4\1\11\1\4\1\12\2\13"+
    "\1\14\1\15\1\4\1\16\1\4\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\14\26\1\27\1\30\1\31"+
    "\1\32\1\13\1\33\1\34\1\35\1\36\1\37\6\40"+
    "\1\41\1\42\1\40\2\43\1\44\1\43\1\45\1\46"+
    "\2\0\1\47\2\0\5\26\1\0\1\14\3\0\1\50"+
    "\3\0\1\14\1\37\1\20\3\0\1\51\2\0\7\26"+
    "\1\52\2\26\1\53\1\26\1\54\3\26\1\55\3\26"+
    "\1\56\1\0\1\57\1\60\1\61\1\62\3\0\1\41"+
    "\1\0\1\63\1\47\1\43\1\0\2\43\1\64\23\0"+
    "\4\26\1\65\2\26\1\66\17\0\3\50\1\0\1\64"+
    "\1\67\1\70\1\0\13\26\1\71\5\26\1\0\1\72"+
    "\1\73\16\43\1\74\1\66\17\43\20\0\5\26\1\65"+
    "\2\26\15\0\2\50\1\75\1\0\1\76\1\26\1\77"+
    "\2\26\1\100\6\26\1\101\1\102\1\26\27\43\7\0"+
    "\2\26\1\65\1\26\2\0\1\103\4\26\1\104\3\26"+
    "\1\0\1\105\3\0\1\26\4\0\3\26\1\106\1\107"+
    "\1\110\1\26\1\111\1\26\3\0\1\26\1\75\2\0"+
    "\1\112\3\26\1\113\3\0\1\65\2\75\2\0\1\114"+
    "\1\0\1\115\3\0\1\65\7\0\1\65\7\0\1\116"+
    "\4\0\1\117\1\0\1\116\1\0\1\50\6\0\1\120"+
    "\1\0\1\121\1\122\2\0\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\140\0\300\0\u0120\0\u0180\0\u01e0\0\u0240\0\u01e0"+
    "\0\u02a0\0\u0300\0\u0360\0\u03c0\0\u0420\0\u0480\0\u01e0\0\u01e0"+
    "\0\u04e0\0\u01e0\0\u0540\0\u01e0\0\u05a0\0\u0600\0\u0660\0\u01e0"+
    "\0\u06c0\0\u0720\0\u0780\0\u0360\0\u07e0\0\u0840\0\u08a0\0\u01e0"+
    "\0\u0900\0\u01e0\0\u0960\0\u09c0\0\u0a20\0\u0a80\0\u0ae0\0\u0b40"+
    "\0\u0ba0\0\u0c00\0\u0c60\0\u0cc0\0\u0d20\0\u0d80\0\u0de0\0\u0360"+
    "\0\u01e0\0\u0360\0\u0e40\0\u0360\0\u0360\0\u0360\0\u01e0\0\u0360"+
    "\0\u01e0\0\u0ea0\0\u0f00\0\u0f60\0\u0fc0\0\u1020\0\u1080\0\u01e0"+
    "\0\u10e0\0\u1140\0\u11a0\0\u1200\0\u1260\0\u1140\0\u01e0\0\u12c0"+
    "\0\u03c0\0\u01e0\0\u1320\0\u1380\0\u13e0\0\u1440\0\u14a0\0\u1500"+
    "\0\u1560\0\u15c0\0\u1620\0\u1680\0\u16e0\0\u1740\0\u17a0\0\u1800"+
    "\0\u1860\0\u18c0\0\u1920\0\u1920\0\u01e0\0\u0840\0\u1980\0\u19e0"+
    "\0\u1980\0\u1a40\0\u1aa0\0\u01e0\0\u1b00\0\u0900\0\u1b60\0\u1bc0"+
    "\0\u1c20\0\u1c80\0\u0960\0\u1ce0\0\u1d40\0\u0960\0\u1da0\0\u1e00"+
    "\0\u1e60\0\u1ec0\0\u1f20\0\u0960\0\u1f80\0\u1fe0\0\u2040\0\u20a0"+
    "\0\u0e40\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u1080\0\u2100\0\u2160"+
    "\0\u2100\0\u21c0\0\u01e0\0\u1140\0\u2220\0\u2280\0\u22e0\0\u2340"+
    "\0\u23a0\0\u2400\0\u2460\0\u24c0\0\u2520\0\u2580\0\u25e0\0\u2640"+
    "\0\u26a0\0\u2700\0\u2760\0\u27c0\0\u2820\0\u2880\0\u28e0\0\u2940"+
    "\0\u29a0\0\u2a00\0\u2a60\0\u2ac0\0\u2b20\0\u2b80\0\u2be0\0\u2c40"+
    "\0\u2ca0\0\u2d00\0\u2d60\0\u01e0\0\u2dc0\0\u2e20\0\u2e80\0\u2ee0"+
    "\0\u2f40\0\u2fa0\0\u3000\0\u3060\0\u30c0\0\u3120\0\u3180\0\u31e0"+
    "\0\u3240\0\u32a0\0\u3300\0\u3360\0\u33c0\0\u3420\0\u3480\0\u3480"+
    "\0\u1860\0\u18c0\0\u34e0\0\u3540\0\u35a0\0\u3600\0\u3660\0\u36c0"+
    "\0\u3720\0\u3780\0\u37e0\0\u3840\0\u38a0\0\u3900\0\u0960\0\u3960"+
    "\0\u39c0\0\u3a20\0\u3a80\0\u3ae0\0\u3b40\0\u01e0\0\u01e0\0\u3ba0"+
    "\0\u3c00\0\u3c60\0\u3cc0\0\u3d20\0\u3d80\0\u3de0\0\u3e40\0\u3ea0"+
    "\0\u3f00\0\u3f60\0\u3fc0\0\u4020\0\u4080\0\u01e0\0\u1140\0\u40e0"+
    "\0\u4140\0\u41a0\0\u4200\0\u4260\0\u42c0\0\u4320\0\u4380\0\u43e0"+
    "\0\u4440\0\u44a0\0\u4500\0\u4560\0\u45c0\0\u4620\0\u4680\0\u46e0"+
    "\0\u4740\0\u47a0\0\u4800\0\u4860\0\u48c0\0\u4920\0\u4980\0\u49e0"+
    "\0\u4a40\0\u4aa0\0\u4b00\0\u4b60\0\u4bc0\0\u4c20\0\u4c80\0\u4ce0"+
    "\0\u4d40\0\u4da0\0\u4e00\0\u4e60\0\u4ec0\0\u4f20\0\u4f80\0\u4fe0"+
    "\0\u5040\0\u50a0\0\u5100\0\u5160\0\u51c0\0\u5220\0\u5280\0\u52e0"+
    "\0\u5340\0\u53a0\0\u5400\0\u5460\0\u54c0\0\u5520\0\u5580\0\u0960"+
    "\0\u55e0\0\u0960\0\u5640\0\u56a0\0\u0960\0\u5700\0\u5760\0\u57c0"+
    "\0\u5820\0\u5880\0\u58e0\0\u0960\0\u5940\0\u59a0\0\u5a00\0\u5a60"+
    "\0\u5ac0\0\u5b20\0\u5b80\0\u5be0\0\u5c40\0\u5ca0\0\u5d00\0\u5d60"+
    "\0\u5dc0\0\u5e20\0\u5e80\0\u5ee0\0\u5f40\0\u5fa0\0\u6000\0\u6060"+
    "\0\u60c0\0\u6120\0\u6180\0\u61e0\0\u6240\0\u62a0\0\u6300\0\u6360"+
    "\0\u63c0\0\u6420\0\u6480\0\u64e0\0\u6540\0\u65a0\0\u6600\0\u6660"+
    "\0\u66c0\0\u6720\0\u0960\0\u6780\0\u67e0\0\u6840\0\u68a0\0\u6900"+
    "\0\u6960\0\u69c0\0\u6a20\0\u6a80\0\u0960\0\u6ae0\0\u6b40\0\u6ba0"+
    "\0\u6c00\0\u6c60\0\u6cc0\0\u6d20\0\u6d80\0\u6de0\0\u6e40\0\u6ea0"+
    "\0\u0960\0\u0960\0\u0960\0\u6f00\0\u0960\0\u6f60\0\u6fc0\0\u7020"+
    "\0\u7080\0\u70e0\0\u7140\0\u71a0\0\u7200\0\u0960\0\u7260\0\u72c0"+
    "\0\u7320\0\u0960\0\u7380\0\u73e0\0\u7440\0\u74a0\0\u7500\0\u7560"+
    "\0\u75c0\0\u7620\0\u0960\0\u7680\0\u0960\0\u76e0\0\u7740\0\u77a0"+
    "\0\u7800\0\u7860\0\u78c0\0\u7920\0\u7980\0\u79e0\0\u7a40\0\u7aa0"+
    "\0\u7b00\0\u7b60\0\u7bc0\0\u7c20\0\u7c80\0\u7ce0\0\u7d40\0\u7da0"+
    "\0\u2ca0\0\u7e00\0\u7e60\0\u7ec0\0\u7f20\0\u01e0\0\u7f80\0\u01e0"+
    "\0\u7fe0\0\u01e0\0\u8040\0\u80a0\0\u8100\0\u8160\0\u81c0\0\u8220"+
    "\0\u01e0\0\u8280\0\u01e0\0\u01e0\0\u82e0\0\u8340\0\u83a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\13\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\3\26\1\27\1\30\1\31\1\32\1\13\1\33"+
    "\1\34\27\35\1\36\1\37\1\40\1\13\1\41\1\42"+
    "\2\43\1\44\1\45\1\46\1\47\2\43\1\50\1\43"+
    "\1\51\1\52\1\53\1\54\3\43\1\55\2\43\1\56"+
    "\2\43\1\57\1\60\1\61\1\62\1\6\1\43\1\6"+
    "\1\63\1\35\1\64\1\65\1\66\1\67\2\13\1\70"+
    "\1\13\3\71\1\72\12\71\1\73\100\71\1\74\3\71"+
    "\1\0\17\71\1\72\12\71\1\75\100\71\1\76\3\71"+
    "\1\0\17\71\1\72\56\71\1\77\1\71\1\100\33\71"+
    "\1\101\2\71\1\0\14\71\1\0\1\7\1\10\1\11"+
    "\1\7\1\102\1\103\1\104\1\102\1\105\3\102\1\106"+
    "\1\107\104\102\2\0\1\102\2\0\7\102\142\0\1\7"+
    "\1\0\2\7\134\0\1\7\1\10\2\7\134\0\1\7"+
    "\1\0\2\7\12\0\1\110\125\0\1\13\1\0\2\13"+
    "\3\0\1\13\1\0\2\13\4\0\1\13\1\0\5\13"+
    "\30\0\1\13\1\0\1\13\32\0\1\13\1\0\1\13"+
    "\11\0\4\13\2\111\1\112\3\111\1\112\54\111\1\113"+
    "\54\111\1\0\1\114\1\0\2\114\1\13\1\0\2\13"+
    "\3\0\1\13\1\0\2\13\4\0\1\13\1\0\5\13"+
    "\30\0\1\13\1\0\1\13\1\115\1\0\3\115\1\116"+
    "\1\117\3\115\1\120\11\115\1\121\4\115\1\0\1\13"+
    "\1\0\1\13\1\0\1\115\7\0\4\13\2\122\1\0"+
    "\6\122\1\0\12\122\1\123\36\122\1\124\54\122\4\0"+
    "\1\125\1\13\1\0\2\13\3\0\1\13\1\0\2\13"+
    "\4\26\1\13\1\0\5\13\30\0\1\13\1\0\1\13"+
    "\1\126\31\0\1\13\1\0\1\13\3\0\1\63\5\0"+
    "\4\13\4\0\1\125\1\13\1\0\2\13\3\0\1\13"+
    "\1\0\1\127\1\13\4\26\1\13\1\0\2\13\1\65"+
    "\2\13\30\0\1\13\1\0\1\13\1\126\31\0\1\13"+
    "\1\0\1\13\3\0\1\63\5\0\4\13\17\0\1\110"+
    "\4\26\13\0\1\130\11\0\1\131\6\0\1\132\5\0"+
    "\1\126\5\0\1\130\10\0\1\131\7\0\1\132\10\0"+
    "\1\63\30\0\1\110\4\26\13\0\1\130\26\0\1\126"+
    "\5\0\1\130\31\0\1\63\16\0\1\133\1\0\2\133"+
    "\3\0\1\133\1\0\2\133\4\0\1\134\1\0\5\133"+
    "\30\0\1\133\1\0\1\133\32\0\1\133\1\0\1\133"+
    "\11\0\4\133\5\0\1\13\1\0\2\13\3\0\1\13"+
    "\1\0\1\64\1\13\4\0\1\13\1\0\5\13\30\0"+
    "\1\13\1\0\1\13\32\0\1\13\1\0\1\13\11\0"+
    "\4\13\5\0\1\13\1\0\2\13\3\0\1\13\1\0"+
    "\2\13\4\0\1\13\1\0\2\13\1\66\2\13\30\0"+
    "\1\13\1\0\1\13\32\0\1\13\1\0\1\13\11\0"+
    "\4\13\5\0\1\13\1\0\2\13\3\0\1\13\1\0"+
    "\2\13\4\0\1\13\1\0\5\13\30\0\1\13\1\0"+
    "\1\13\1\115\1\0\27\115\1\0\1\13\1\0\1\13"+
    "\1\0\1\115\7\0\4\13\7\0\1\135\1\0\1\35"+
    "\6\0\4\35\7\0\27\35\4\0\1\35\1\0\27\35"+
    "\5\0\1\35\1\0\2\35\11\0\1\136\1\0\2\136"+
    "\1\137\1\0\2\137\3\0\1\137\1\0\1\137\1\136"+
    "\6\0\5\137\27\140\1\0\1\137\1\0\1\137\1\140"+
    "\1\0\27\140\1\0\1\141\1\0\1\137\1\0\1\140"+
    "\2\0\1\140\3\142\1\0\4\137\5\0\1\13\1\0"+
    "\2\13\3\0\1\13\1\0\2\13\4\0\1\13\1\0"+
    "\5\13\30\0\1\13\1\0\1\13\3\0\1\143\26\0"+
    "\1\13\1\0\1\13\11\0\4\13\7\0\1\144\1\0"+
    "\1\43\6\0\4\145\7\0\27\43\4\0\1\146\1\0"+
    "\27\43\5\0\1\43\1\0\2\43\17\0\1\144\1\0"+
    "\1\43\6\0\4\43\7\0\27\43\4\0\1\43\1\0"+
    "\27\43\5\0\1\43\1\0\2\43\17\0\1\144\1\0"+
    "\1\43\6\0\4\43\7\0\27\43\4\0\1\43\1\0"+
    "\1\147\11\43\1\150\14\43\5\0\1\43\1\0\2\43"+
    "\17\0\1\144\1\0\1\43\6\0\4\43\7\0\27\43"+
    "\4\0\1\43\1\0\1\151\3\43\1\152\10\43\1\153"+
    "\11\43\5\0\1\43\1\0\2\43\17\0\1\144\1\0"+
    "\1\43\6\0\4\43\7\0\27\43\4\0\1\43\1\0"+
    "\12\43\1\154\14\43\5\0\1\43\1\0\2\43\17\0"+
    "\1\144\1\0\1\43\6\0\4\43\7\0\27\43\4\0"+
    "\1\43\1\0\15\43\1\155\11\43\5\0\1\43\1\0"+
    "\2\43\17\0\1\144\1\0\1\43\6\0\4\43\7\0"+
    "\27\43\4\0\1\43\1\0\5\43\1\156\5\43\1\157"+
    "\1\160\12\43\5\0\1\43\1\0\2\43\17\0\1\144"+
    "\1\0\1\43\6\0\4\43\7\0\27\43\4\0\1\43"+
    "\1\0\4\43\1\161\22\43\5\0\1\43\1\0\2\43"+
    "\17\0\1\144\1\0\1\43\6\0\4\43\7\0\27\43"+
    "\4\0\1\43\1\0\15\43\1\162\11\43\5\0\1\43"+
    "\1\0\2\43\17\0\1\144\1\0\1\43\6\0\4\43"+
    "\7\0\27\43\4\0\1\43\1\0\4\43\1\163\22\43"+
    "\5\0\1\43\1\0\2\43\17\0\1\144\1\0\1\43"+
    "\6\0\4\43\7\0\27\43\4\0\1\43\1\0\5\43"+
    "\1\164\21\43\5\0\1\43\1\0\2\43\17\0\1\144"+
    "\1\0\1\43\6\0\4\43\7\0\27\43\4\0\1\43"+
    "\1\0\7\43\1\165\16\43\1\166\5\0\1\43\1\0"+
    "\2\43\17\0\1\144\1\0\1\43\6\0\4\43\7\0"+
    "\27\43\4\0\1\43\1\0\7\43\1\167\17\43\5\0"+
    "\1\43\1\0\2\43\26\0\1\170\141\0\4\63\42\0"+
    "\1\171\37\0\1\63\13\0\1\71\256\0\1\172\34\0"+
    "\1\173\242\0\1\174\34\0\1\175\122\0\1\176\1\0"+
    "\2\176\1\177\1\0\2\177\3\0\1\177\1\0\1\177"+
    "\1\176\6\0\5\177\27\200\1\0\1\177\1\0\1\177"+
    "\1\200\1\0\27\200\1\0\1\201\1\0\1\177\1\0"+
    "\1\200\2\0\1\200\3\202\1\0\4\177\64\0\1\203"+
    "\60\0\2\102\1\0\6\102\1\0\104\102\2\0\1\102"+
    "\2\0\7\102\1\0\2\111\1\112\2\111\1\103\1\204"+
    "\1\111\6\103\1\111\44\103\1\205\37\103\2\111\1\103"+
    "\2\111\7\103\1\111\16\0\1\206\121\0\2\122\1\0"+
    "\2\122\2\207\1\122\1\207\1\102\4\207\1\122\44\207"+
    "\1\210\37\207\2\122\1\207\2\122\7\207\1\122\20\0"+
    "\4\211\42\0\1\110\52\0\4\212\1\0\1\111\1\0"+
    "\2\111\6\0\4\111\7\0\1\213\1\214\1\215\1\216"+
    "\1\217\1\220\1\221\1\222\3\0\1\223\1\0\1\224"+
    "\2\0\1\221\1\225\1\0\1\221\1\222\3\0\1\111"+
    "\1\0\1\226\2\0\2\111\3\0\1\111\6\0\1\111"+
    "\1\227\1\0\1\111\1\0\1\111\1\0\1\111\1\0"+
    "\1\230\10\0\1\111\12\0\1\114\1\0\2\114\66\0"+
    "\1\231\1\232\3\0\1\233\11\0\1\234\36\0\1\115"+
    "\6\0\4\115\7\0\27\115\4\0\1\115\1\0\27\115"+
    "\5\0\1\115\1\0\2\115\21\0\1\115\6\0\4\115"+
    "\7\0\27\115\4\0\1\115\1\0\4\115\1\235\22\115"+
    "\5\0\1\115\1\0\2\115\21\0\1\115\6\0\4\115"+
    "\7\0\27\115\4\0\1\115\1\0\12\115\1\236\1\115"+
    "\1\237\2\115\1\240\7\115\5\0\1\115\1\0\2\115"+
    "\21\0\1\115\6\0\4\115\7\0\27\115\4\0\1\115"+
    "\1\0\5\115\1\241\6\115\1\242\12\115\5\0\1\115"+
    "\1\0\2\115\21\0\1\115\6\0\4\115\7\0\27\115"+
    "\4\0\1\115\1\0\14\115\1\243\12\115\5\0\1\115"+
    "\1\0\2\115\21\0\1\244\133\0\1\133\1\0\2\133"+
    "\1\244\2\0\1\133\1\0\2\133\4\0\1\133\1\0"+
    "\5\133\30\0\1\133\1\0\1\133\32\0\1\133\1\0"+
    "\1\133\11\0\4\133\6\0\1\122\1\0\2\122\6\0"+
    "\4\245\7\0\1\246\1\247\1\250\1\251\1\252\1\253"+
    "\1\254\1\255\3\0\1\256\1\0\1\257\2\0\1\254"+
    "\1\260\1\0\1\254\1\255\3\0\1\122\1\0\1\261"+
    "\2\0\2\122\3\0\1\122\6\0\1\122\1\262\1\0"+
    "\1\122\1\0\1\122\1\0\1\122\1\0\1\263\10\0"+
    "\1\245\30\0\1\110\140\0\4\26\42\0\1\126\37\0"+
    "\1\63\11\0\1\264\1\265\1\0\1\266\1\265\1\13"+
    "\1\264\2\13\3\264\1\13\2\264\1\13\6\264\5\13"+
    "\105\264\14\0\1\267\1\0\1\267\1\0\4\270\134\0"+
    "\3\271\43\0\1\131\71\0\4\272\7\0\6\272\25\0"+
    "\1\132\1\0\6\272\47\0\1\133\1\0\2\133\3\0"+
    "\1\133\1\0\2\133\4\0\1\133\1\0\5\133\30\0"+
    "\1\133\1\0\1\133\32\0\1\133\1\0\1\133\11\0"+
    "\4\133\1\0\1\136\1\0\2\136\1\137\1\0\2\137"+
    "\3\0\1\137\1\0\2\137\4\0\1\137\1\0\5\137"+
    "\27\140\1\0\1\137\1\0\1\137\1\140\1\0\27\140"+
    "\1\0\1\141\1\0\1\137\1\0\1\140\2\0\1\140"+
    "\3\142\1\0\4\137\1\0\1\136\1\0\2\136\1\137"+
    "\1\0\2\137\1\140\2\0\1\137\1\0\1\137\1\136"+
    "\4\140\2\0\5\137\27\140\1\0\1\137\1\0\1\137"+
    "\1\140\1\0\27\140\1\0\1\141\1\0\1\137\1\0"+
    "\1\140\1\0\2\140\3\142\1\0\4\137\5\0\1\137"+
    "\1\0\2\137\3\0\1\137\1\0\2\137\4\0\1\137"+
    "\1\0\5\137\30\0\1\137\1\0\1\137\32\0\1\137"+
    "\1\0\1\137\11\0\4\137\74\0\1\273\52\0\1\144"+
    "\1\0\1\43\5\0\1\110\4\145\7\0\4\43\1\274"+
    "\22\43\4\0\1\146\1\0\4\43\1\274\22\43\5\0"+
    "\1\43\1\0\2\43\17\0\1\144\1\0\1\43\6\0"+
    "\4\43\7\0\27\43\4\0\1\43\1\0\20\43\1\275"+
    "\6\43\5\0\1\43\1\0\2\43\17\0\1\144\1\0"+
    "\1\43\6\0\4\43\7\0\27\43\4\0\1\43\1\0"+
    "\1\276\26\43\5\0\1\43\1\0\2\43\17\0\1\144"+
    "\1\0\1\43\6\0\4\43\7\0\27\43\4\0\1\43"+
    "\1\0\21\43\1\277\5\43\5\0\1\43\1\0\2\43"+
    "\17\0\1\144\1\0\1\43\6\0\4\43\7\0\27\43"+
    "\4\0\1\43\1\0\5\43\1\300\11\43\1\301\7\43"+
    "\5\0\1\43\1\0\2\43\17\0\1\144\1\0\1\43"+
    "\6\0\4\43\7\0\27\43\4\0\1\43\1\0\20\43"+
    "\1\302\6\43\5\0\1\43\1\0\2\43\17\0\1\144"+
    "\1\0\1\43\6\0\4\43\7\0\27\43\4\0\1\43"+
    "\1\0\17\43\1\303\7\43\5\0\1\43\1\0\2\43"+
    "\17\0\1\144\1\0\1\43\6\0\4\43\7\0\27\43"+
    "\4\0\1\43\1\0\16\43\1\304\10\43\5\0\1\43"+
    "\1\0\2\43\17\0\1\144\1\0\1\43\6\0\4\43"+
    "\7\0\27\43\4\0\1\43\1\0\5\43\1\305\12\43"+
    "\1\306\6\43\5\0\1\43\1\0\2\43\17\0\1\144"+
    "\1\0\1\43\6\0\4\43\7\0\27\43\4\0\1\43"+
    "\1\0\21\43\1\307\5\43\5\0\1\43\1\0\2\43"+
    "\17\0\1\144\1\0\1\43\6\0\4\43\7\0\27\43"+
    "\4\0\1\43\1\0\3\43\1\310\23\43\5\0\1\43"+
    "\1\0\2\43\17\0\1\144\1\0\1\43\6\0\4\43"+
    "\7\0\27\43\4\0\1\43\1\0\24\43\1\311\2\43"+
    "\5\0\1\43\1\0\2\43\17\0\1\144\1\0\1\43"+
    "\6\0\4\43\7\0\27\43\4\0\1\43\1\0\4\43"+
    "\1\312\22\43\5\0\1\43\1\0\2\43\17\0\1\144"+
    "\1\0\1\43\6\0\4\43\7\0\27\43\4\0\1\43"+
    "\1\0\16\43\1\313\10\43\5\0\1\43\1\0\2\43"+
    "\17\0\1\144\1\0\1\43\6\0\4\43\7\0\27\43"+
    "\4\0\1\43\1\0\4\43\1\314\22\43\5\0\1\43"+
    "\1\0\2\43\11\0\1\315\1\0\2\315\2\0\1\316"+
    "\110\0\1\317\20\0\1\176\1\0\2\176\1\177\1\0"+
    "\2\177\3\0\1\177\1\0\2\177\4\0\1\177\1\0"+
    "\5\177\27\200\1\0\1\177\1\0\1\177\1\200\1\0"+
    "\27\200\1\0\1\201\1\0\1\177\1\0\1\200\2\0"+
    "\1\200\3\202\1\0\4\177\1\0\1\176\1\0\2\176"+
    "\1\177\1\0\2\177\1\200\2\0\1\177\1\0\1\177"+
    "\1\176\4\200\2\0\5\177\27\200\1\0\1\177\1\0"+
    "\1\177\1\200\1\0\27\200\1\0\1\201\1\0\1\177"+
    "\1\0\1\200\1\0\2\200\3\202\1\0\4\177\5\0"+
    "\1\177\1\0\2\177\3\0\1\177\1\0\2\177\4\0"+
    "\1\177\1\0\5\177\30\0\1\177\1\0\1\177\32\0"+
    "\1\177\1\0\1\177\11\0\4\177\1\0\4\212\1\102"+
    "\1\103\1\0\2\103\4\102\1\0\1\102\4\103\7\102"+
    "\1\320\1\321\1\322\1\323\1\324\1\325\1\326\1\327"+
    "\3\102\1\330\1\102\1\331\2\102\1\326\1\332\1\102"+
    "\1\326\1\327\3\102\1\103\1\102\1\333\2\102\2\103"+
    "\3\102\1\103\6\102\1\103\1\334\1\102\1\103\1\102"+
    "\1\103\1\102\1\103\1\102\1\335\5\102\2\0\1\102"+
    "\1\111\1\0\7\102\122\0\1\336\23\0\2\102\1\0"+
    "\1\102\1\337\4\102\1\0\104\102\2\0\1\102\2\0"+
    "\7\102\6\0\1\102\1\207\1\0\2\207\4\102\1\0"+
    "\1\102\4\340\7\102\1\341\1\342\1\343\1\344\1\345"+
    "\1\346\1\347\1\350\3\102\1\351\1\102\1\352\2\102"+
    "\1\347\1\353\1\102\1\347\1\350\3\102\1\207\1\102"+
    "\1\354\2\102\2\207\3\102\1\207\6\102\1\207\1\355"+
    "\1\102\1\207\1\102\1\207\1\102\1\207\1\102\1\356"+
    "\5\102\2\0\1\102\1\245\1\0\7\102\21\0\4\211"+
    "\13\0\1\130\26\0\1\110\5\0\1\130\44\0\4\212"+
    "\56\0\1\111\111\0\1\357\141\0\1\360\14\0\1\111"+
    "\116\0\1\361\17\0\1\111\121\0\1\362\1\0\1\360"+
    "\6\0\1\363\140\0\1\111\1\364\1\222\2\0\1\365"+
    "\1\366\122\0\1\111\13\0\1\111\137\0\1\111\140\0"+
    "\1\111\122\0\1\111\132\0\1\357\22\0\1\360\124\0"+
    "\1\111\5\0\1\111\3\0\1\367\1\370\2\0\1\361"+
    "\110\0\35\111\40\0\1\111\30\0\3\111\135\0\4\111"+
    "\7\0\6\111\27\0\6\111\136\0\1\371\145\0\1\372"+
    "\1\0\1\373\2\0\1\374\125\0\1\241\6\0\1\375"+
    "\137\0\1\376\44\0\1\115\6\0\4\115\7\0\27\115"+
    "\4\0\1\115\1\0\5\115\1\377\21\115\5\0\1\115"+
    "\1\0\2\115\21\0\1\115\6\0\4\115\7\0\27\115"+
    "\4\0\1\115\1\0\10\115\1\u0100\7\115\1\u0101\6\115"+
    "\5\0\1\115\1\0\2\115\21\0\1\115\6\0\4\115"+
    "\7\0\27\115\4\0\1\115\1\0\3\115\1\u0102\23\115"+
    "\5\0\1\115\1\0\2\115\21\0\1\115\6\0\4\115"+
    "\7\0\27\115\4\0\1\115\1\0\17\115\1\u0103\7\115"+
    "\5\0\1\115\1\0\2\115\10\0\2\241\2\0\57\241"+
    "\1\u0104\54\241\11\0\1\115\6\0\4\115\7\0\27\115"+
    "\4\0\1\115\1\0\2\115\1\u0105\24\115\5\0\1\115"+
    "\1\0\2\115\21\0\1\115\6\0\4\115\7\0\27\115"+
    "\4\0\1\115\1\0\3\115\1\u0106\23\115\5\0\1\115"+
    "\1\0\2\115\21\0\1\244\6\0\4\245\102\0\1\245"+
    "\46\0\1\u0107\141\0\1\u0108\14\0\1\122\116\0\1\u0109"+
    "\17\0\1\122\121\0\1\u010a\1\0\1\u0108\6\0\1\u010b"+
    "\140\0\1\122\1\u010c\1\255\2\0\1\u010d\1\u010e\122\0"+
    "\1\122\13\0\1\122\137\0\1\122\140\0\1\122\122\0"+
    "\1\122\132\0\1\u0107\22\0\1\u0108\124\0\1\122\5\0"+
    "\1\u010f\3\0\1\u0110\1\u0111\2\0\1\u0109\110\0\35\122"+
    "\40\0\1\122\30\0\3\u0112\135\0\4\u0113\7\0\6\u0113"+
    "\27\0\6\u0113\42\0\2\264\2\0\135\264\1\u0114\1\0"+
    "\1\u0115\1\u0114\60\264\1\u0116\32\264\1\u0116\17\264\1\0"+
    "\1\u0115\1\0\2\u0115\60\0\1\u0116\32\0\1\u0116\37\0"+
    "\4\270\212\0\1\u0117\50\0\1\144\1\0\1\43\2\0"+
    "\1\267\1\0\1\267\1\0\4\43\7\0\27\43\4\0"+
    "\1\43\1\0\27\43\5\0\1\43\1\0\2\43\17\0"+
    "\1\144\1\0\1\43\6\0\4\43\7\0\27\43\4\0"+
    "\1\43\1\0\4\43\1\u0118\22\43\5\0\1\43\1\0"+
    "\2\43\17\0\1\144\1\0\1\43\6\0\4\43\7\0"+
    "\27\43\4\0\1\43\1\0\20\43\1\u0119\6\43\5\0"+
    "\1\43\1\0\2\43\17\0\1\144\1\0\1\43\6\0"+
    "\4\43\7\0\27\43\4\0\1\43\1\0\1\u011a\26\43"+
    "\5\0\1\43\1\0\2\43\17\0\1\144\1\0\1\43"+
    "\6\0\4\43\7\0\27\43\4\0\1\43\1\0\1\u011b"+
    "\26\43\5\0\1\43\1\0\2\43\17\0\1\144\1\0"+
    "\1\43\6\0\4\43\7\0\27\43\4\0\1\43\1\0"+
    "\10\43\1\u011c\16\43\5\0\1\43\1\0\2\43\17\0"+
    "\1\144\1\0\1\43\6\0\4\43\7\0\27\43\4\0"+
    "\1\43\1\0\4\43\1\u011d\22\43\5\0\1\43\1\0"+
    "\2\43\17\0\1\144\1\0\1\43\6\0\4\43\7\0"+
    "\27\43\4\0\1\43\1\0\4\43\1\u011e\22\43\5\0"+
    "\1\43\1\0\2\43\17\0\1\144\1\0\1\43\6\0"+
    "\4\43\7\0\27\43\4\0\1\43\1\0\15\43\1\u011f"+
    "\11\43\5\0\1\43\1\0\2\43\17\0\1\144\1\0"+
    "\1\43\6\0\4\43\7\0\27\43\4\0\1\43\1\0"+
    "\10\43\1\u0120\16\43\5\0\1\43\1\0\2\43\17\0"+
    "\1\144\1\0\1\43\6\0\4\43\7\0\27\43\4\0"+
    "\1\43\1\0\21\43\1\u0121\5\43\5\0\1\43\1\0"+
    "\2\43\17\0\1\144\1\0\1\43\6\0\4\43\7\0"+
    "\27\43\4\0\1\43\1\0\22\43\1\u0122\4\43\5\0"+
    "\1\43\1\0\2\43\17\0\1\144\1\0\1\43\6\0"+
    "\4\43\7\0\27\43\4\0\1\43\1\0\21\43\1\u0123"+
    "\5\43\5\0\1\43\1\0\2\43\17\0\1\144\1\0"+
    "\1\43\6\0\4\43\7\0\27\43\4\0\1\43\1\0"+
    "\14\43\1\u0124\12\43\5\0\1\43\1\0\2\43\17\0"+
    "\1\144\1\0\1\43\6\0\4\43\7\0\27\43\4\0"+
    "\1\43\1\0\4\43\1\u0125\22\43\5\0\1\43\1\0"+
    "\2\43\17\0\1\144\1\0\1\43\6\0\4\43\7\0"+
    "\27\43\4\0\1\43\1\0\17\43\1\u0126\7\43\5\0"+
    "\1\43\1\0\2\43\130\0\1\317\24\0\2\102\1\0"+
    "\6\102\1\0\16\102\1\u0127\65\102\2\0\1\102\2\0"+
    "\7\102\6\0\2\102\1\0\6\102\1\0\20\102\1\u0128"+
    "\14\102\1\103\46\102\2\0\1\102\2\0\7\102\6\0"+
    "\2\102\1\0\6\102\1\0\14\102\1\u0129\17\102\1\103"+
    "\47\102\2\0\1\102\2\0\7\102\6\0\2\102\1\0"+
    "\6\102\1\0\16\102\1\u012a\1\102\1\u0128\6\102\1\u012b"+
    "\54\102\2\0\1\102\2\0\7\102\6\0\2\102\1\0"+
    "\6\102\1\0\30\102\1\103\1\u012c\1\327\2\102\1\u012d"+
    "\1\u012e\45\102\2\0\1\102\2\0\7\102\6\0\2\102"+
    "\1\0\6\102\1\0\21\102\1\103\13\102\1\103\46\102"+
    "\2\0\1\102\2\0\7\102\6\0\2\102\1\0\6\102"+
    "\1\0\35\102\1\103\46\102\2\0\1\102\2\0\7\102"+
    "\6\0\2\102\1\0\6\102\1\0\36\102\1\103\45\102"+
    "\2\0\1\102\2\0\7\102\6\0\2\102\1\0\6\102"+
    "\1\0\21\102\1\103\62\102\2\0\1\102\2\0\7\102"+
    "\6\0\2\102\1\0\6\102\1\0\14\102\1\u0127\22\102"+
    "\1\u0128\44\102\2\0\1\102\2\0\7\102\6\0\2\102"+
    "\1\0\6\102\1\0\24\102\1\103\5\102\1\103\3\102"+
    "\1\u012f\1\u0130\2\102\1\u0129\41\102\2\0\1\102\2\0"+
    "\7\102\6\0\2\102\1\0\6\102\1\0\13\102\35\103"+
    "\34\102\2\0\1\102\1\0\1\111\7\102\6\0\2\102"+
    "\1\0\6\102\1\0\1\102\3\103\100\102\2\0\1\102"+
    "\2\0\7\102\6\0\2\102\1\0\6\102\1\0\1\102"+
    "\4\103\7\102\6\103\27\102\6\103\25\102\2\0\1\102"+
    "\2\0\7\102\6\0\2\102\1\0\1\102\1\337\4\102"+
    "\1\0\1\102\4\340\77\102\2\0\1\102\1\245\1\0"+
    "\7\102\6\0\2\102\1\0\6\102\1\0\16\102\1\u0131"+
    "\65\102\2\0\1\102\2\0\7\102\6\0\2\102\1\0"+
    "\6\102\1\0\20\102\1\u0132\14\102\1\207\46\102\2\0"+
    "\1\102\2\0\7\102\6\0\2\102\1\0\6\102\1\0"+
    "\14\102\1\u0133\17\102\1\207\47\102\2\0\1\102\2\0"+
    "\7\102\6\0\2\102\1\0\6\102\1\0\16\102\1\u0134"+
    "\1\102\1\u0132\6\102\1\u0135\54\102\2\0\1\102\2\0"+
    "\7\102\6\0\2\102\1\0\6\102\1\0\30\102\1\207"+
    "\1\u0136\1\350\2\102\1\u0137\1\u0138\45\102\2\0\1\102"+
    "\2\0\7\102\6\0\2\102\1\0\6\102\1\0\21\102"+
    "\1\207\13\102\1\207\46\102\2\0\1\102\2\0\7\102"+
    "\6\0\2\102\1\0\6\102\1\0\35\102\1\207\46\102"+
    "\2\0\1\102\2\0\7\102\6\0\2\102\1\0\6\102"+
    "\1\0\36\102\1\207\45\102\2\0\1\102\2\0\7\102"+
    "\6\0\2\102\1\0\6\102\1\0\21\102\1\207\62\102"+
    "\2\0\1\102\2\0\7\102\6\0\2\102\1\0\6\102"+
    "\1\0\14\102\1\u0131\22\102\1\u0132\44\102\2\0\1\102"+
    "\2\0\7\102\6\0\2\102\1\0\6\102\1\0\24\102"+
    "\1\207\5\102\1\u0139\3\102\1\u013a\1\u013b\2\102\1\u0133"+
    "\41\102\2\0\1\102\2\0\7\102\6\0\2\102\1\0"+
    "\6\102\1\0\13\102\35\207\34\102\2\0\1\102\1\0"+
    "\1\122\7\102\6\0\2\102\1\0\6\102\1\0\1\102"+
    "\3\u013c\100\102\2\0\1\102\2\0\7\102\6\0\2\102"+
    "\1\0\6\102\1\0\1\102\4\u013d\7\102\6\u013d\27\102"+
    "\6\u013d\25\102\2\0\1\102\2\0\7\102\46\0\1\111"+
    "\140\0\1\111\141\0\1\111\110\0\1\111\155\0\1\111"+
    "\152\0\1\111\122\0\1\111\136\0\1\111\23\0\1\111"+
    "\137\0\1\111\113\0\1\111\200\0\1\u013e\142\0\1\u013f"+
    "\7\0\1\u0140\122\0\1\u0141\153\0\1\u0142\122\0\1\u0143"+
    "\140\0\1\u0144\55\0\1\115\6\0\4\115\7\0\27\115"+
    "\4\0\1\115\1\0\10\115\1\u0145\16\115\5\0\1\115"+
    "\1\0\2\115\21\0\1\115\6\0\4\115\7\0\27\115"+
    "\4\0\1\115\1\0\5\115\1\241\21\115\5\0\1\115"+
    "\1\0\2\115\21\0\1\115\6\0\4\115\7\0\27\115"+
    "\4\0\1\115\1\0\4\115\1\241\22\115\5\0\1\115"+
    "\1\0\2\115\21\0\1\115\6\0\4\115\7\0\27\115"+
    "\4\0\1\115\1\0\10\115\1\u0100\16\115\5\0\1\115"+
    "\1\0\2\115\21\0\1\115\6\0\4\115\7\0\27\115"+
    "\4\0\1\115\1\0\15\115\1\u0146\11\115\5\0\1\115"+
    "\1\0\2\115\10\0\3\241\1\u0147\57\241\1\u0104\54\241"+
    "\11\0\1\115\6\0\4\115\7\0\27\115\4\0\1\115"+
    "\1\0\12\115\1\u0148\14\115\5\0\1\115\1\0\2\115"+
    "\21\0\1\115\6\0\4\115\7\0\27\115\4\0\1\115"+
    "\1\0\4\115\1\u0100\22\115\5\0\1\115\1\0\2\115"+
    "\55\0\1\122\140\0\1\122\141\0\1\122\110\0\1\122"+
    "\155\0\1\122\152\0\1\122\122\0\1\122\136\0\1\122"+
    "\23\0\1\122\70\0\1\244\30\0\1\122\155\0\1\122"+
    "\113\0\1\122\114\0\1\244\6\0\3\u0112\126\0\1\244"+
    "\6\0\4\u0113\7\0\6\u0113\27\0\6\u0113\42\0\1\264"+
    "\1\u0114\1\0\1\u0115\1\u0114\133\264\1\0\1\u0115\1\0"+
    "\2\u0115\133\0\2\u0116\2\u0149\134\u0116\100\0\1\u014a\46\0"+
    "\1\144\1\0\1\43\6\0\4\43\7\0\27\43\4\0"+
    "\1\43\1\0\20\43\1\u014b\6\43\5\0\1\43\1\0"+
    "\2\43\17\0\1\144\1\0\1\43\6\0\4\43\7\0"+
    "\27\43\4\0\1\43\1\0\22\43\1\u014c\4\43\5\0"+
    "\1\43\1\0\2\43\17\0\1\144\1\0\1\43\6\0"+
    "\4\43\7\0\27\43\4\0\1\43\1\0\23\43\1\u014d"+
    "\3\43\5\0\1\43\1\0\2\43\17\0\1\144\1\0"+
    "\1\43\6\0\4\43\7\0\27\43\4\0\1\43\1\0"+
    "\10\43\1\u014e\16\43\5\0\1\43\1\0\2\43\17\0"+
    "\1\144\1\0\1\43\6\0\4\43\7\0\27\43\4\0"+
    "\1\43\1\0\17\43\1\u014f\7\43\5\0\1\43\1\0"+
    "\2\43\17\0\1\144\1\0\1\43\6\0\4\43\7\0"+
    "\27\43\4\0\1\43\1\0\25\43\1\u0150\1\43\5\0"+
    "\1\43\1\0\2\43\17\0\1\144\1\0\1\43\6\0"+
    "\4\43\7\0\27\43\4\0\1\43\1\0\1\u0151\26\43"+
    "\5\0\1\43\1\0\2\43\17\0\1\144\1\0\1\43"+
    "\6\0\4\43\7\0\27\43\4\0\1\43\1\0\12\43"+
    "\1\u0152\14\43\5\0\1\43\1\0\2\43\17\0\1\144"+
    "\1\0\1\43\6\0\4\43\7\0\27\43\4\0\1\43"+
    "\1\0\26\43\1\u0153\5\0\1\43\1\0\2\43\14\0"+
    "\1\u0154\2\0\1\144\1\0\1\43\6\0\4\43\7\0"+
    "\27\43\4\0\1\43\1\0\27\43\5\0\1\43\1\0"+
    "\2\43\17\0\1\144\1\0\1\43\6\0\4\43\7\0"+
    "\27\43\4\0\1\43\1\0\4\43\1\u0155\22\43\5\0"+
    "\1\43\1\0\2\43\15\0\2\102\1\0\6\102\1\0"+
    "\26\102\1\103\55\102\2\0\1\102\2\0\7\102\6\0"+
    "\2\102\1\0\6\102\1\0\27\102\1\103\54\102\2\0"+
    "\1\102\2\0\7\102\6\0\2\102\1\0\6\102\1\0"+
    "\31\102\1\103\52\102\2\0\1\102\2\0\7\102\6\0"+
    "\2\102\1\0\6\102\1\0\2\102\1\103\101\102\2\0"+
    "\1\102\2\0\7\102\6\0\2\102\1\0\6\102\1\0"+
    "\20\102\1\103\63\102\2\0\1\102\2\0\7\102\6\0"+
    "\2\102\1\0\6\102\1\0\33\102\1\103\50\102\2\0"+
    "\1\102\2\0\7\102\6\0\2\102\1\0\6\102\1\0"+
    "\16\102\1\103\65\102\2\0\1\102\2\0\7\102\6\0"+
    "\2\102\1\0\6\102\1\0\15\102\1\103\23\102\1\103"+
    "\42\102\2\0\1\102\2\0\7\102\6\0\2\102\1\0"+
    "\6\102\1\0\41\102\1\103\42\102\2\0\1\102\2\0"+
    "\7\102\6\0\2\102\1\0\6\102\1\0\15\102\1\103"+
    "\66\102\2\0\1\102\2\0\7\102\6\0\2\102\1\0"+
    "\6\102\1\0\26\102\1\207\55\102\2\0\1\102\2\0"+
    "\7\102\6\0\2\102\1\0\6\102\1\0\27\102\1\207"+
    "\54\102\2\0\1\102\2\0\7\102\6\0\2\102\1\0"+
    "\6\102\1\0\31\102\1\207\52\102\2\0\1\102\2\0"+
    "\7\102\6\0\2\102\1\0\6\102\1\0\2\102\1\207"+
    "\101\102\2\0\1\102\2\0\7\102\6\0\2\102\1\0"+
    "\6\102\1\0\20\102\1\207\63\102\2\0\1\102\2\0"+
    "\7\102\6\0\2\102\1\0\6\102\1\0\33\102\1\207"+
    "\50\102\2\0\1\102\2\0\7\102\6\0\2\102\1\0"+
    "\6\102\1\0\16\102\1\207\65\102\2\0\1\102\2\0"+
    "\7\102\6\0\2\102\1\0\6\102\1\0\15\102\1\207"+
    "\23\102\1\207\42\102\2\0\1\102\2\0\7\102\6\0"+
    "\2\102\1\0\1\102\1\337\4\102\1\0\23\102\1\207"+
    "\60\102\2\0\1\102\2\0\7\102\6\0\2\102\1\0"+
    "\6\102\1\0\41\102\1\207\42\102\2\0\1\102\2\0"+
    "\7\102\6\0\2\102\1\0\6\102\1\0\15\102\1\207"+
    "\66\102\2\0\1\102\2\0\7\102\6\0\2\102\1\0"+
    "\1\102\1\337\4\102\1\0\1\102\3\u013c\100\102\2\0"+
    "\1\102\2\0\7\102\6\0\2\102\1\0\1\102\1\337"+
    "\4\102\1\0\1\102\4\u013d\7\102\6\u013d\27\102\6\u013d"+
    "\25\102\2\0\1\102\2\0\7\102\101\0\1\u0156\134\0"+
    "\1\241\136\0\1\241\143\0\1\u013f\144\0\1\u0157\134\0"+
    "\1\u0158\131\0\1\u013f\54\0\1\115\6\0\4\115\7\0"+
    "\27\115\4\0\1\115\1\0\14\115\1\u0101\12\115\5\0"+
    "\1\115\1\0\2\115\21\0\1\115\6\0\4\115\7\0"+
    "\27\115\4\0\1\115\1\0\17\115\1\241\7\115\5\0"+
    "\1\115\1\0\2\115\10\0\3\241\1\0\57\241\1\u0104"+
    "\54\241\11\0\1\115\6\0\4\115\7\0\27\115\4\0"+
    "\1\115\1\0\22\115\1\u0159\4\115\5\0\1\115\1\0"+
    "\2\115\11\0\1\u015a\2\u0149\1\u015a\11\0\1\u015b\44\0"+
    "\1\u015c\160\0\1\u015d\42\0\1\144\1\0\1\43\6\0"+
    "\4\43\7\0\27\43\4\0\1\43\1\0\12\43\1\u015e"+
    "\14\43\5\0\1\43\1\0\2\43\17\0\1\144\1\0"+
    "\1\43\6\0\4\43\7\0\27\43\4\0\1\43\1\0"+
    "\10\43\1\u015f\16\43\5\0\1\43\1\0\2\43\17\0"+
    "\1\144\1\0\1\43\6\0\4\43\7\0\27\43\4\0"+
    "\1\43\1\0\6\43\1\u0160\20\43\5\0\1\43\1\0"+
    "\2\43\17\0\1\144\1\0\1\43\6\0\4\43\7\0"+
    "\27\43\4\0\1\43\1\0\21\43\1\u0161\5\43\5\0"+
    "\1\43\1\0\2\43\17\0\1\144\1\0\1\43\6\0"+
    "\4\43\7\0\27\43\4\0\1\43\1\0\12\43\1\u0162"+
    "\4\43\1\u0163\7\43\5\0\1\43\1\0\2\43\17\0"+
    "\1\144\1\0\1\43\6\0\4\43\7\0\27\43\4\0"+
    "\1\43\1\0\14\43\1\u0164\12\43\5\0\1\43\1\0"+
    "\2\43\17\0\1\144\1\0\1\43\6\0\4\43\7\0"+
    "\27\43\4\0\1\43\1\0\4\43\1\u0165\22\43\5\0"+
    "\1\43\1\0\2\43\17\0\1\144\1\0\1\43\6\0"+
    "\4\43\7\0\27\43\4\0\1\43\1\0\16\43\1\u0166"+
    "\10\43\5\0\1\43\1\0\2\43\105\0\1\u0167\2\0"+
    "\1\u0168\143\0\1\u0140\142\0\1\241\142\0\1\u0169\36\0"+
    "\1\115\6\0\4\115\7\0\27\115\4\0\1\115\1\0"+
    "\3\115\1\u016a\23\115\5\0\1\115\1\0\2\115\11\0"+
    "\1\u015a\1\0\2\u015a\11\0\1\u015b\44\0\1\u015c\72\0"+
    "\1\u016b\212\0\1\u016c\165\0\1\u016d\27\0\1\144\1\0"+
    "\1\43\6\0\4\43\7\0\27\43\4\0\1\43\1\0"+
    "\21\43\1\u016e\5\43\5\0\1\43\1\0\2\43\17\0"+
    "\1\144\1\0\1\43\6\0\4\43\7\0\27\43\4\0"+
    "\1\43\1\0\14\43\1\u016f\12\43\5\0\1\43\1\0"+
    "\2\43\17\0\1\144\1\0\1\43\6\0\4\43\7\0"+
    "\27\43\4\0\1\43\1\0\14\43\1\u0170\12\43\5\0"+
    "\1\43\1\0\2\43\17\0\1\144\1\0\1\43\6\0"+
    "\4\43\7\0\27\43\4\0\1\43\1\0\2\43\1\u0171"+
    "\24\43\5\0\1\43\1\0\2\43\17\0\1\144\1\0"+
    "\1\43\6\0\4\43\7\0\27\43\4\0\1\43\1\0"+
    "\4\43\1\u0172\22\43\5\0\1\43\1\0\2\43\100\0"+
    "\1\u0173\153\0\1\u0174\126\0\1\u0175\55\0\1\115\6\0"+
    "\4\115\7\0\27\115\4\0\1\115\1\0\4\115\1\u0176"+
    "\22\115\5\0\1\115\1\0\2\115\10\0\1\u0116\1\u0177"+
    "\1\u0149\1\u0178\1\u0177\1\0\1\u0116\2\0\3\u0116\1\0"+
    "\2\u0116\1\0\6\u0116\5\0\105\u0116\74\0\1\u0179\135\0"+
    "\1\u017a\54\0\1\144\1\0\1\43\6\0\4\43\7\0"+
    "\27\43\4\0\1\43\1\0\6\43\1\u017b\20\43\5\0"+
    "\1\43\1\0\2\43\14\0\1\u017c\2\0\1\144\1\0"+
    "\1\43\6\0\4\43\7\0\27\43\4\0\1\43\1\0"+
    "\27\43\5\0\1\43\1\0\2\43\17\0\1\144\1\0"+
    "\1\43\6\0\4\43\7\0\27\43\4\0\1\43\1\0"+
    "\4\43\1\u017d\22\43\5\0\1\43\1\0\2\43\113\0"+
    "\1\u017e\144\0\1\u017f\123\0\1\u0176\43\0\1\241\1\u0176"+
    "\1\0\1\u0180\1\u0176\1\241\1\u0181\54\241\1\u0104\54\241"+
    "\1\u0116\1\u0177\1\u0149\1\u0178\1\u0177\133\u0116\1\0\1\u0178"+
    "\1\u0149\2\u0178\11\0\1\u015b\44\0\1\u015c\152\0\1\u0182"+
    "\146\0\1\u0183\126\0\1\u0184\3\0\1\u0185\137\0\1\u0186"+
    "\150\0\1\u0187\27\0\1\u0180\1\0\2\u0180\1\0\1\u0188"+
    "\131\0\2\241\2\0\13\241\5\u0189\7\241\27\u0189\1\241"+
    "\1\u0104\2\241\1\u0189\1\241\27\u0189\5\241\1\u0189\1\241"+
    "\2\u0189\5\241\1\u0189\2\241\100\0\1\u018a\132\0\1\u018b"+
    "\161\0\1\u018c\125\0\1\u018d\136\0\1\u018e\125\0\1\u018f"+
    "\66\0\5\u0190\7\0\27\u0190\4\0\1\u0190\1\0\27\u0190"+
    "\5\0\1\u0190\1\0\2\u0190\5\0\1\u0190\2\0\2\241"+
    "\2\0\2\241\1\u0191\10\241\5\u0189\7\241\27\u0189\1\241"+
    "\1\u0104\2\241\1\u0189\1\241\27\u0189\5\241\1\u0189\1\241"+
    "\2\u0189\5\241\1\u0189\2\241\104\0\1\u0192\127\0\1\u0193"+
    "\151\0\1\u0194\137\0\1\u0195\147\0\1\u0196\125\0\1\u0197"+
    "\41\0\1\u0198\10\0\5\u0190\7\0\27\u0190\4\0\1\u0190"+
    "\1\0\27\u0190\5\0\1\u0190\1\0\2\u0190\5\0\1\u0190"+
    "\121\0\1\u0199\141\0\1\u019a\123\0\1\u019b\137\0\1\u019c"+
    "\124\0\1\u019d\137\0\1\u019e\154\0\1\u019f\137\0\1\u01a0"+
    "\124\0\1\u01a1\150\0\1\u01a2\143\0\1\u01a3\137\0\1\u01a4"+
    "\121\0\1\u01a5\140\0\1\u01a6\164\0\1\u01a7\20\0\2\u0149"+
    "\134\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[33792];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\1\11\6\1\2\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\7\1\1\11\1\1\1\11"+
    "\16\1\1\11\5\1\1\11\1\1\1\11\6\1\1\11"+
    "\6\1\1\11\2\0\1\11\2\0\5\1\1\0\1\1"+
    "\3\0\1\1\3\0\2\1\1\11\3\0\1\1\2\0"+
    "\1\11\24\1\1\0\4\11\3\0\1\1\1\0\1\11"+
    "\2\1\1\0\3\1\23\0\7\1\1\11\17\0\3\1"+
    "\1\0\3\1\1\0\21\1\1\0\2\11\16\1\1\11"+
    "\20\1\20\0\10\1\15\0\3\1\1\0\46\1\7\0"+
    "\4\1\2\0\11\1\1\0\1\1\3\0\1\1\4\0"+
    "\11\1\3\0\2\1\2\0\5\1\3\0\3\1\2\0"+
    "\1\1\1\0\1\1\3\0\1\1\7\0\1\1\7\0"+
    "\1\1\4\0\1\11\1\0\1\11\1\0\1\11\6\0"+
    "\1\11\1\0\2\11\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private int commentStart;
    private int commentDepth;

    private int optionsGhcStart;
    private int optionsGhcDepth;

    private int haddockStart;
    private int haddockDepth;

    private int qqStart;
    private int qqDepth;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case NCOMMENT: {
              yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return HS_NOT_TERMINATED_COMMENT;
            }  // fall though
            case 424: break;
            case NHADDOCK: {
              yybegin(YYINITIAL);
        zzStartRead = haddockStart;
        return HS_NOT_TERMINATED_COMMENT;
            }  // fall though
            case 425: break;
            case QQ: {
              yybegin(YYINITIAL);
        zzStartRead = qqStart;
        return HS_NOT_TERMINATED_QQ_EXPRESSION;
            }  // fall though
            case 426: break;
            case OPTIONS_GHC: {
              yybegin(YYINITIAL);
        return com.intellij.psi.TokenType.BAD_CHARACTER;
            }  // fall though
            case 427: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 83: break;
          case 2:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 84: break;
          case 3:
            { return HS_NEWLINE;
            }
          // fall through
          case 85: break;
          case 4:
            { return HS_VARSYM_ID;
            }
          // fall through
          case 86: break;
          case 5:
            { return HS_DOUBLE_QUOTES;
            }
          // fall through
          case 87: break;
          case 6:
            { return HS_QUOTE;
            }
          // fall through
          case 88: break;
          case 7:
            { return HS_LEFT_PAREN;
            }
          // fall through
          case 89: break;
          case 8:
            { return HS_RIGHT_PAREN;
            }
          // fall through
          case 90: break;
          case 9:
            { return HS_COMMA;
            }
          // fall through
          case 91: break;
          case 10:
            { return HS_DOT;
            }
          // fall through
          case 92: break;
          case 11:
            { return HS_DECIMAL;
            }
          // fall through
          case 93: break;
          case 12:
            { return HS_CONSYM_ID;
            }
          // fall through
          case 94: break;
          case 13:
            { return HS_SEMICOLON;
            }
          // fall through
          case 95: break;
          case 14:
            { return HS_EQUAL;
            }
          // fall through
          case 96: break;
          case 15:
            { return HS_AT;
            }
          // fall through
          case 97: break;
          case 16:
            { return HS_CON_ID;
            }
          // fall through
          case 98: break;
          case 17:
            { return HS_LEFT_BRACKET;
            }
          // fall through
          case 99: break;
          case 18:
            { return HS_BACKSLASH;
            }
          // fall through
          case 100: break;
          case 19:
            { return HS_RIGHT_BRACKET;
            }
          // fall through
          case 101: break;
          case 20:
            { return HS_UNDERSCORE;
            }
          // fall through
          case 102: break;
          case 21:
            { return HS_BACKQUOTE;
            }
          // fall through
          case 103: break;
          case 22:
            { return HS_VAR_ID;
            }
          // fall through
          case 104: break;
          case 23:
            { return HS_LEFT_BRACE;
            }
          // fall through
          case 105: break;
          case 24:
            { return HS_VERTICAL_BAR;
            }
          // fall through
          case 106: break;
          case 25:
            { return HS_RIGHT_BRACE;
            }
          // fall through
          case 107: break;
          case 26:
            { return HS_TILDE;
            }
          // fall through
          case 108: break;
          case 27:
            { return HS_LEFT_ARROW;
            }
          // fall through
          case 109: break;
          case 28:
            { return HS_RIGHT_ARROW;
            }
          // fall through
          case 110: break;
          case 29:
            { return HS_DOUBLE_RIGHT_ARROW;
            }
          // fall through
          case 111: break;
          case 30:
            { return HS_FORALL;
            }
          // fall through
          case 112: break;
          case 31:
            { return HS_COLON_COLON;
            }
          // fall through
          case 113: break;
          case 32:
            { 
            }
          // fall through
          case 114: break;
          case 33:
            { qqDepth++;
            }
          // fall through
          case 115: break;
          case 34:
            { if (qqDepth > 0) {
                qqDepth--;
            }
            else {
                 yybegin(YYINITIAL);
                 zzStartRead = qqStart;
                 return HS_LIST_COMPREHENSION;
            }
            }
          // fall through
          case 116: break;
          case 35:
            { return HS_ONE_PRAGMA;
            }
          // fall through
          case 117: break;
          case 36:
            { return HS_HASH;
            }
          // fall through
          case 118: break;
          case 37:
            { return HS_PRAGMA_SEP;
            }
          // fall through
          case 119: break;
          case 38:
            { return HS_DASH;
            }
          // fall through
          case 120: break;
          case 39:
            { return HS_STRING_LITERAL;
            }
          // fall through
          case 121: break;
          case 40:
            { return HS_COMMENT;
            }
          // fall through
          case 122: break;
          case 41:
            { yybegin(QQ);
    qqDepth = 0;
    qqStart = getTokenStart();
            }
          // fall through
          case 123: break;
          case 42:
            { return HS_DO;
            }
          // fall through
          case 124: break;
          case 43:
            { return HS_IF;
            }
          // fall through
          case 125: break;
          case 44:
            { return HS_IN;
            }
          // fall through
          case 126: break;
          case 45:
            { return HS_OF;
            }
          // fall through
          case 127: break;
          case 46:
            { yybegin(NCOMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
          // fall through
          case 128: break;
          case 47:
            { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return HS_NCOMMENT;
        }
            }
          // fall through
          case 129: break;
          case 48:
            { commentDepth++;
            }
          // fall through
          case 130: break;
          case 49:
            { if (haddockDepth > 0) {
            haddockDepth--;
        }
        else {
             yybegin(YYINITIAL);
             zzStartRead = haddockStart;
             return HS_NHADDOCK;
        }
            }
          // fall through
          case 131: break;
          case 50:
            { haddockDepth++;
            }
          // fall through
          case 132: break;
          case 51:
            { if (qqDepth > 0) {
            qqDepth--;
        }
        else {
             yybegin(YYINITIAL);
             zzStartRead = qqStart;
             return HS_QUASIQUOTE;
        }
            }
          // fall through
          case 133: break;
          case 52:
            { return HS_FLOAT;
            }
          // fall through
          case 134: break;
          case 53:
            { return HS_DIRECTIVE;
            }
          // fall through
          case 135: break;
          case 54:
            { return HS_CHARACTER_LITERAL;
            }
          // fall through
          case 136: break;
          case 55:
            { return HS_OCTAL;
            }
          // fall through
          case 137: break;
          case 56:
            { return HS_HEXADECIMAL;
            }
          // fall through
          case 138: break;
          case 57:
            { return HS_LET;
            }
          // fall through
          case 139: break;
          case 58:
            { yybegin(OPTIONS_GHC);
    return HS_PRAGMA_START;
            }
          // fall through
          case 140: break;
          case 59:
            { yybegin(NHADDOCK);
    haddockDepth = 0;
    haddockStart = getTokenStart();
            }
          // fall through
          case 141: break;
          case 60:
            { yybegin(YYINITIAL);
        return HS_PRAGMA_END;
            }
          // fall through
          case 142: break;
          case 61:
            { return HS_HADDOCK;
            }
          // fall through
          case 143: break;
          case 62:
            { return HS_CASE;
            }
          // fall through
          case 144: break;
          case 63:
            { return HS_DATA;
            }
          // fall through
          case 145: break;
          case 64:
            { return HS_ELSE;
            }
          // fall through
          case 146: break;
          case 65:
            { return HS_THEN;
            }
          // fall through
          case 147: break;
          case 66:
            { return HS_TYPE;
            }
          // fall through
          case 148: break;
          case 67:
            { return HS_CLASS;
            }
          // fall through
          case 149: break;
          case 68:
            { return HS_INFIX;
            }
          // fall through
          case 150: break;
          case 69:
            { return HS_WHERE;
            }
          // fall through
          case 151: break;
          case 70:
            { return HS_IMPORT;
            }
          // fall through
          case 152: break;
          case 71:
            { return HS_INFIXL;
            }
          // fall through
          case 153: break;
          case 72:
            { return HS_INFIXR;
            }
          // fall through
          case 154: break;
          case 73:
            { return HS_MODULE;
            }
          // fall through
          case 155: break;
          case 74:
            { return HS_DEFAULT;
            }
          // fall through
          case 156: break;
          case 75:
            { return HS_NEWTYPE;
            }
          // fall through
          case 157: break;
          case 76:
            { return HS_DERIVING;
            }
          // fall through
          case 158: break;
          case 77:
            { return HS_INSTANCE;
            }
          // fall through
          case 159: break;
          case 78:
            { return HS_INCLUDE_DIRECTIVE;
            }
          // fall through
          case 160: break;
          case 79:
            { return HS_TYPE_FAMILY;
            }
          // fall through
          case 161: break;
          case 80:
            { return HS_TYPE_INSTANCE;
            }
          // fall through
          case 162: break;
          case 81:
            { return HS_FOREIGN_EXPORT;
            }
          // fall through
          case 163: break;
          case 82:
            { return HS_FOREIGN_IMPORT;
            }
          // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
